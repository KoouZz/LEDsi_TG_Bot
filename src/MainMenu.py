import logging
import os
from dotenv import load_dotenv
from httpx import request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

logger = logging.getLogger()
logger.setLevel(logging.INFO)
load_dotenv()

class MainMenu:
    @staticmethod
    async def show(update: Update, context: CallbackContext):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        if "last_buttons" in context.user_data:
            try:
                logger.info("–ù–∞—à–µ–ª –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —É–¥–∞–ª—è—é...")
                await context.bot.edit_message_reply_markup(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data["last_buttons"],
                    reply_markup=None
                )
                del context.user_data["last_buttons"]
            except:
                pass

        try:
            if update.message:
                message = update.message
                user_id = update.message.from_user.id
            elif update.callback_query:
                await update.callback_query.answer()
                message = update.callback_query.message
                user_id = update.callback_query.from_user.id
            else:
                return ConversationHandler.END

            allowed_users = os.getenv("USER_ALLOW")
            allowed_users_list = [int(uid.strip()) for uid in allowed_users.split(",") if uid.strip().isdigit()]

            engineers = os.getenv("ENGINEERS")
            engineers_list = [int(uid.strip()) for uid in engineers.split(",") if uid.strip().isdigit()]

            if user_id == int(os.getenv("CODE_X2")):
                keyboard = [
                    [InlineKeyboardButton("üî¥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data='load')],
                    [InlineKeyboardButton("üü¢ –°—Ç–∞—Ç—É—Å", callback_data='status')],
                    [InlineKeyboardButton("üõ†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='work'),
                     InlineKeyboardButton("‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data='work_done')],
                    [InlineKeyboardButton("üëÄ –í–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="approval")],
                    [InlineKeyboardButton("<ADM>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data='send_message')],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
            elif user_id in allowed_users_list and user_id not in engineers_list:
                keyboard = [
                    [InlineKeyboardButton("üî¥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data='load')],
                    [InlineKeyboardButton("üü¢ –°—Ç–∞—Ç—É—Å", callback_data='status')],
                    [InlineKeyboardButton("üõ†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='work'),
                     InlineKeyboardButton("‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data='work_done')],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
            elif user_id in engineers_list:
                keyboard = [
                    [InlineKeyboardButton("üî¥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data='load')],
                    [InlineKeyboardButton("üü¢ –°—Ç–∞—Ç—É—Å", callback_data='status')],
                    [InlineKeyboardButton("üõ†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='work'),
                     InlineKeyboardButton("‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data='work_done')],
                    [InlineKeyboardButton("üëÄ –í–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="approval")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
            else:
                keyboard = [
                    [InlineKeyboardButton("üî¥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data='load')],
                    [InlineKeyboardButton("üü¢ –°—Ç–∞—Ç—É—Å", callback_data='status')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

            sent = await message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç LEDsi –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º",
                reply_markup=reply_markup
            )
            context.user_data["last_buttons"] = sent.message_id
            return ConversationHandler.END
        except Exception as e:
            raise
import os

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler, CallbackQueryHandler
from Utils import Commands
from Utils import States
from MainMenu import MainMenu
from PhotoLoader import Load
import logging
import asyncio

logger = logging.getLogger()
logging.basicConfig(level=logging.INFO)

class GraphMenu:
    @staticmethod
    async def func(update: Update, context: CallbackContext):
        query = update.callback_query
        await query.answer()

        from datetime import datetime
        user_id = query.from_user.id
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        save_dir = f"photos/{user_id}_{timestamp}"

        context.user_data["current_photo_dir"] = save_dir  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Ç—å
        context.user_data["from_image_upload"] = False
        context.chat_data["document_groups"] = {}  # —Å–±—Ä–æ—Å–∏—Ç—å –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        keyboard = [
            [InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="image")],
            [InlineKeyboardButton("–í—ã—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="write")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")],
        ]
        markup = InlineKeyboardMarkup(keyboard)
        sent = await query.edit_message_text("–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=markup)
        context.user_data["last_buttons"] = sent.message_id

    @staticmethod
    async def image_way_naming(update: Update, context: CallbackContext) -> int:
        query = update.callback_query
        await query.answer()
        key = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]]
        markup = InlineKeyboardMarkup(key)
        sent = await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                                             "1. –ó–ü–£–ü-******\n"
                                             "2. –û–û–û –†–æ–º–∞—à–∫–∞",
                                             reply_markup=markup)
        context.user_data["last_buttons"] = sent.message_id
        context.user_data["from_image_upload"] = False
        return States.NAMING_IMG

    @staticmethod
    async def image_way(update: Update, context: CallbackContext) -> int:
        await context.bot.edit_message_reply_markup(
            chat_id=update.effective_chat.id,
            message_id=context.user_data["last_buttons"],
            reply_markup=None
        )
        context.user_data["screen_name"] = update.message.text
        key = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]]
        markup = InlineKeyboardMarkup(key)
        sent = await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                                             "1. –ù–∞–∂–º–∏—Ç–µ üìé\n"
                                             "2. –í—ã–±–µ—Ä–µ—Ç–µ –§–ê–ô–õ (–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–∫ –§–ê–ô–õ)\n"
                                             "3. –í—ã–±–µ—Ä–µ—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n"
                                             "4. –ù–∞–∂–º–∏—Ç–µ –û–¢–ü–†–ê–í–ò–¢–¨\n",
                                             reply_markup=markup)
        context.user_data["last_buttons"] = sent.message_id
        context.user_data["from_image_upload"] = False
        return States.LOAD_IMG

    @staticmethod
    async def load_image(update: Update, context: CallbackContext):
        if not context.user_data["from_image_upload"]:
            message = update.message
            media_group_id = message.media_group_id
            save_dir = context.user_data.get("current_photo_dir", "photos/unknown")
            os.makedirs(save_dir, exist_ok=True)

            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç")
            if not message.document or not message.document.mime_type.startswith("image/"):
                logger.error("–≠—Ç–æ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç")
                return States.LOAD_IMG

            # –û–¥–∏–Ω —Ñ–∞–π–ª –≤–Ω–µ –∞–ª—å–±–æ–º–∞
            if not media_group_id:
                logger.warning("–û–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª")
                await message.reply_text("–ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ, —Å–µ–∫—É–Ω–¥—É...")
                await Load.photo_save([message], save_dir)
                await message.reply_text("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                context.user_data["from_image_upload"] = True

            # –ì—Ä—É–ø–ø–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            logger.info(f"–ì—Ä—É–ø–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {media_group_id}")
            group_store = context.chat_data.setdefault("document_groups", {})
            group_list = group_store.setdefault(media_group_id, [])
            group_list.append(message)
            logger.info(f"–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {len(group_list)}")

            # –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–æ–¥–∏–Ω —Ä–∞–∑)
            if f"timer_{media_group_id}" not in context.chat_data and media_group_id != None:
                logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–∞–π–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã...")
                await message.reply_text("–ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ, —Å–µ–∫—É–Ω–¥—É...")

                async def delayed_save():
                    await asyncio.sleep(2.5)
                    messages = group_store.pop(media_group_id, [])
                    context.chat_data.pop(f"timer_{media_group_id}", None)
                    if messages:
                        await Load.photo_save(messages, save_dir)
                        logger.info("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                        # –ø–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ context
                        await messages[0].reply_text("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                        context.user_data["from_image_upload"] = True
                    else:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–µ—Ä–∞")
                context.chat_data[f"timer_{media_group_id}"] = context.application.create_task(delayed_save())

        return None

    @staticmethod
    async def handle_after_upload(update: Update, context: CallbackContext) -> int:
        if context.user_data.get("from_image_upload"):
            # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            context.user_data.pop("from_image_upload", None)
            comment = update.message.text
            name = context.user_data["screen_name"]
            logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∞–π–ª–∞–º: {comment}")
            with open(f"{context.user_data["current_photo_dir"]}/comment.txt", 'w', encoding="utf-8") as f:
                f.write(f"{name}\n\n{comment}\n")
            await update.message.reply_text("–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

            with open(f"{context.user_data["current_photo_dir"]}/status.txt", "w", encoding="utf-8") as f:
                from datetime import datetime
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                f.write(f"{timestamp}_10")

            allowed_users = os.getenv("USER_ALLOW")
            allowed_users_list = [int(uid.strip()) for uid in allowed_users.split(",") if uid.strip().isdigit()]
            for allowed_user in allowed_users_list:
                await context.bot.send_message(chat_id=allowed_user, text="–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!")

            await MainMenu.show(update, context)
            return ConversationHandler.END
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ö–µ–º—ã –∫–∞–∫ —Ñ–∞–π–ª—ã.")
            return States.LOAD_IMG

    @staticmethod
    async def write_way(update: Update, context: CallbackContext) -> int:
        query = update.callback_query
        await query.answer()
        key = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]]
        markup = InlineKeyboardMarkup(key)
        sent = await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n1. –ó–ü–£–ü-******\n2. –û–û–û –†–æ–º–∞—à–∫–∞", reply_markup=markup)
        context.user_data["last_buttons"] = sent.message_id
        return States.NAMING

    @staticmethod
    async def write_way_naming(update: Update, context: CallbackContext) -> int:
        await context.bot.edit_message_reply_markup(
            chat_id=update.effective_chat.id,
            message_id=context.user_data["last_buttons"],
            reply_markup=None
        )
        context.chat_data["screen_name"] = update.message.text
        key = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]]
        markup = InlineKeyboardMarkup(key)
        sent = await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ –≤ –º–º", reply_markup=markup)
        context.user_data["last_buttons"] = sent.message_id
        return States.WIDTH

    @staticmethod
    async def write_way_step_1(update: Update, context: CallbackContext) -> int:
        await context.bot.edit_message_reply_markup(
            chat_id=update.effective_chat.id,
            message_id=context.user_data["last_buttons"],
            reply_markup=None
        )
        context.chat_data["screen_width"] = update.message.text
        key = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]]
        markup = InlineKeyboardMarkup(key)
        sent = await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É —ç–∫—Ä–∞–Ω–∞ –≤ –º–º", reply_markup=markup)
        context.user_data["last_buttons"] = sent.message_id
        return States.HEIGHT

    @staticmethod
    async def write_way_step_2(update: Update, context: CallbackContext) -> int:
        await context.bot.edit_message_reply_markup(
            chat_id=update.effective_chat.id,
            message_id=context.user_data["last_buttons"],
            reply_markup=None
        )
        context.chat_data["screen_height"] = update.message.text
        key = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]]
        markup = InlineKeyboardMarkup(key)
        sent = await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —à–∞–≥ –ø–∏–∫—Å–µ–ª—è —ç–∫—Ä–∞–Ω–∞ –≤ –º–º", reply_markup=markup)
        context.user_data["last_buttons"] = sent.message_id
        return States.PITCH

    @staticmethod
    async def write_way_step_3(update: Update, context: CallbackContext) -> int:
        await context.bot.edit_message_reply_markup(
            chat_id=update.effective_chat.id,
            message_id=context.user_data["last_buttons"],
            reply_markup=None
        )
        context.chat_data["screen_pitch"] = update.message.text
        key = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]]
        markup = InlineKeyboardMarkup(key)
        sent = await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏(–∑–∞–º–µ—á–∞–Ω–∏—è) –∫ –∑–∞–¥–∞—á–µ", reply_markup=markup)
        context.user_data["last_buttons"] = sent.message_id
        return States.COM

    @staticmethod
    async def write_way_step_4(update: Update, context: CallbackContext) -> int:
        await context.bot.edit_message_reply_markup(
            chat_id=update.effective_chat.id,
            message_id=context.user_data["last_buttons"],
            reply_markup=None
        )
        comment = update.message.text
        name = context.chat_data.pop("screen_name", None)
        pith = context.chat_data.pop("screen_pitch", None)
        width = context.chat_data.pop("screen_width", None)
        height = context.chat_data.pop("screen_height", None)
        logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∞–π–ª–∞–º: {comment}")
        os.makedirs(context.user_data["current_photo_dir"], exist_ok=True)
        with open(f"{context.user_data["current_photo_dir"]}/comment.txt", 'w', encoding="utf-8") as f:
            f.write(
                f"{name}\n"
                f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Ä–∞–Ω–∞:\nP{pith} {width}x{height}\n\n"
                f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n{comment}")

        with open(f"{context.user_data["current_photo_dir"]}/status.txt", "w", encoding="utf-8") as f:
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            f.write(f"{timestamp}_10")
        await update.message.reply_text("–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à—É –∑–∞–¥–∞—á—É –∏ –ø–µ—Ä–µ–¥–∞–ª –≤ —Ä–∞–±–æ—Ç—É")

        allowed_users = os.getenv("USER_ALLOW")
        allowed_users_list = [int(uid.strip()) for uid in allowed_users.split(",") if uid.strip().isdigit()]
        for allowed_user in allowed_users_list:
            await context.bot.send_message(chat_id=allowed_user, text="–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!")

        await MainMenu.show(update, context)
        return ConversationHandler.END

    @staticmethod
    async def menu(update, context):
        logger.info("–í—ã–∑–≤–∞–Ω–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ GraphMenu")
        return await Commands.start(update, context)


    def get_handler_graph_menu_image(self) -> ConversationHandler:
        return ConversationHandler(
            entry_points=[CallbackQueryHandler(self.image_way_naming, pattern="^image$")],
            states={
                States.NAMING_IMG: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.image_way),
                               CallbackQueryHandler(self.menu, pattern="^start$")],
                States.LOAD_IMG: [
                    MessageHandler(filters.Document.IMAGE & ~filters.COMMAND, self.load_image),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_after_upload),
                    CallbackQueryHandler(self.menu, pattern="^start$")
                ],
            },
            fallbacks=[
                CommandHandler("cancel", Commands.cancel),
                CommandHandler("start", Commands.start),
            ]
        )
    def get_handler_graph_menu_entry(self) -> CallbackQueryHandler:
        return CallbackQueryHandler(self.func, pattern="^load$")
    def get_handler_graph_menu_write(self) -> ConversationHandler:
        return ConversationHandler(
            entry_points=[CallbackQueryHandler(self.write_way, pattern="^write")],
            states={
                States.NAMING: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.write_way_naming),
                               CallbackQueryHandler(self.menu, pattern="^start$")],
                States.WIDTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.write_way_step_1),
                               CallbackQueryHandler(self.menu, pattern="^start$")],
                States.HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.write_way_step_2),
                                CallbackQueryHandler(self.menu, pattern="^start$")],
                States.PITCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.write_way_step_3),
                               CallbackQueryHandler(self.menu, pattern="^start$")],
                States.COM: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.write_way_step_4),
                             CallbackQueryHandler(self.menu, pattern="^start$")],
            },
            fallbacks=[
                CommandHandler("cancel", Commands.cancel),
                CommandHandler("start", Commands.start),
            ]
        )

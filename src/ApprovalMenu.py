import os
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler, CallbackQueryHandler
from Utils import Commands
from Utils import States, User
from MainMenu import MainMenu
from PhotoLoader import Load
import logging
import asyncio

from Utils import Checker

logger = logging.getLogger()
logging.basicConfig(level=logging.INFO)

class ApprovalMenu:
    @staticmethod
    async def welcome_message(update: Update, context: CallbackContext) -> int:
        query = update.callback_query
        user_id = query.from_user.id
        buttons_list = []
        flag = True
        await query.answer()

        allowed_users = os.getenv("ENGINEERS")
        allowed_users_list = [int(uid.strip()) for uid in allowed_users.split(",") if uid.strip().isdigit()]

        if user_id not in allowed_users_list:
            await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é...")
            await MainMenu.show(update, context)
            return ConversationHandler.END

        dirs = os.listdir("photos/")

        text, tags = Checker.check_status(dirs, ["50"])
        text_none, dev_dir = Checker.check_status(dirs, ["83"])
        logger.info(f"–ü–æ–ª—É—á–∏–ª –ø–∞–ø–∫–∏ dev_dir: {dev_dir}")

        if tags and tags is not None:
            flag = False
            context.user_data["approval_dirs"] = tags

            for tag in tags:
                path = f"photos/{tag}"
                with open(f"{path}/comment.txt", "r", encoding="utf-8") as com:
                    comment_in_lines = com.readlines()
                title = comment_in_lines[0]
                manager = User.get_user_name_from_id(tag.split("_")[0], True)[0]
                but = [InlineKeyboardButton(f"{manager} - {title}", callback_data=f"show_{tag}")]
                buttons_list.append(but)


        if dev_dir and dev_dir is not None:
            context.user_data["dev_dirs"] = dev_dir
            flag = False
            for dir in dev_dir:
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É {dir} —Å–æ —Å—Ö–µ–º–∞–º–∏, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
                dev_but = []
                path_dev = f"photos/{dir}"
                with open(f"{path_dev}/comment.txt", "r", encoding="utf-8") as com:
                    comment_in_lines = com.readlines()
                title = comment_in_lines[0]
                manager = User.get_user_name_from_id(dir.split("_")[0], True)[0]
                with open(f"{path_dev}/status.txt", "r", encoding="utf-8") as stat:
                    status_last_line = stat.readlines()[-1]
                code_dev = status_last_line.split("_")[2]
                if code_dev == "83":
                    dev_name = User.get_user_name_from_id(os.getenv("CODE_X3"), True)[0]
                    dev_but = [InlineKeyboardButton(f"{manager} - {title} ({dev_name})", callback_data=f"dev_{dir}")]
                else:
                    logger.warning(f"–ù–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ —Å—Ö–µ–º–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ–¥–æ–º - {code_dev}")

                if dev_but:
                    buttons_list.append(dev_but)

                context.user_data["code_dev"] = code_dev

        if flag:
            await query.edit_message_text("–ù–µ—Ç —Å—Ö–µ–º –¥–ª—è –≤–∏–∑–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é...")
            await MainMenu.show(update, context)
            return ConversationHandler.END



        if not buttons_list:
            logger.error("–ö–Ω–æ–ø–∫–∏ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤ —Å ")
            await query.edit_message_text("–ù–µ—Ç —Å—Ö–µ–º –¥–ª—è –≤–∏–∑–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é...")
            await MainMenu.show(update, context)
            return ConversationHandler.END

        buttons_list.append([InlineKeyboardButton("üîµ –í –º–µ–Ω—é", callback_data="start")])
        markup = InlineKeyboardMarkup(buttons_list)

        sent = await query.edit_message_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ö–µ–º—ã", reply_markup=markup)
        context.user_data["last_buttons"] = sent.message_id

        return ConversationHandler.END

    @staticmethod
    async def show_dialog(update: Update, context: CallbackContext):
        query = update.callback_query
        user_id = query.from_user.id
        context.user_data["button_text"] = query.data

        await query.answer()

        list_data = query.data.split("_", 1)
        folder = list_data[1]
        manager_dev = list_data[0]

        if manager_dev == "show":
            work_dirs = context.user_data.get("approval_dirs", [])
        elif manager_dev == "dev":
            work_dirs = context.user_data.get("dev_dirs", [])
        else:
            logger.warning("–û—à–∏–±–∫–∞. –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            await context.bot.send_message(chat_id=user_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")
            await MainMenu.show(update, context)
            return ConversationHandler.END

        selected_dir = None

        for dir in work_dirs:
            if dir.startswith(folder) or dir.endswith(folder):
                selected_dir = dir
                break
        folder_path = f"photos/{selected_dir}"
        comment_path = f"{folder_path}/comment.txt"
        jpg_files = []
        media_path = None

        if manager_dev == "dev":
            media_path = f"{folder_path}/complete"


        if not selected_dir:
            await query.edit_message_text("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return ConversationHandler.END

        await query.edit_message_text("–°–µ–∫—É–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")

        jpg_files_source = sorted(
            [f for f in os.listdir(folder_path) if f.lower().endswith((".jpg", ".png", ".webp", ".bmp", "jpeg"))])

        if media_path and media_path is not None:
            jpg_files = sorted(
                [f for f in os.listdir(media_path) if f.lower().endswith((".jpg", ".png", ".webp", ".bmp", "jpeg"))])


        if jpg_files_source:
            from telegram import InputMediaPhoto
            media_group = [InputMediaPhoto(open(os.path.join(folder_path, img), "rb")) for img in jpg_files_source]
            try:
                await context.bot.send_message(chat_id=query.message.chat_id, text="–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                await context.bot.send_media_group(chat_id=query.message.chat_id, media=media_group)
            except:
                await context.bot.send_message(chat_id=query.message.chat_id,
                                               text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")
                await MainMenu.show(update, context)
                return ConversationHandler.END

            if jpg_files:
                from telegram import InputMediaPhoto
                media_group = [InputMediaPhoto(open(os.path.join(media_path, img), "rb")) for img in jpg_files]
                try:
                    await context.bot.send_message(chat_id=query.message.chat_id, text="–î–∞–Ω–Ω—ã–µ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—Ö–µ–º")
                    await context.bot.send_media_group(chat_id=query.message.chat_id, media=media_group)
                except:
                    await context.bot.send_message(chat_id=query.message.chat_id,
                                                   text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")
                    await MainMenu.show(update, context)
                    return ConversationHandler.END


        if os.path.exists(comment_path):
            with open(comment_path, "r", encoding="utf-8") as f:
                comment = f.read()
            if comment:
                await context.bot.send_message(chat_id=query.message.chat_id, text=comment)
            else:
                await context.bot.send_message(chat_id=query.message.chat_id, text="–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

        context.user_data["curr_dir"] = selected_dir
        context.user_data["manager_dev"] = manager_dev
        buttons = [[InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="approve")],
                   [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data="discard")],
                   [InlineKeyboardButton("üîµ –í –º–µ–Ω—é", callback_data="start")]]
        markup = InlineKeyboardMarkup(buttons)

        sent = await context.bot.send_message(chat_id=query.message.chat_id,
                                       text=f"–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=markup)

        context.user_data["last_buttons"] = sent.message_id
        return States.APPROVAL_MNU

    @staticmethod
    async def event_dialog(update: Update, context: CallbackContext):
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()

        event = query.data
        selected_dir = context.user_data.get("curr_dir", [])
        manager_id = selected_dir.split("_")[0]
        dev_id = None
        manager_dev = context.user_data.get("manager_dev", [])
        code_dev = None

        with open(f"photos/{selected_dir}/comment.txt", "r", encoding="utf-8") as com:
            comment_in_lines = com.readlines()
        title = comment_in_lines[0]
        manager_name = User.get_user_name_from_id(manager_id, True)[0]

        if "code_dev" in context.user_data and context.user_data["code_dev"] and context.user_data["code_dev"] is not None:
            code_dev = context.user_data.get("code_dev", [])
        status_file = f"photos/{selected_dir}/status.txt"
        code = None

        if manager_dev == "show":
            if user_id == int(os.getenv("CODE_X1")):
                code = "51"
            elif user_id == int(os.getenv("CODE_X2")):
                code = "52"
            else:
                await query.edit_message_text(
                    "–û—à–∏–±–∫–∞, –í—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. ")
                await MainMenu().show(update, context)
                return ConversationHandler.END
        else:
            if code_dev is not None and code_dev:
                if code_dev == "83":
                    code = "33"
                    dev_id = os.getenv("CODE_X3")

        with open(status_file, "a", encoding="utf-8") as f:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            if event == "approve":
                if code is not None and code:
                    f.write(f"\n{timestamp}_{code}")
                else:
                    await query.edit_message_text(
                        "–û—à–∏–±–∫–∞, –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")
                    await MainMenu().show(update, context)
                    return ConversationHandler.END

                if manager_dev == "show":
                    but = [[InlineKeyboardButton("–î–∞", callback_data="have_spec"),
                           InlineKeyboardButton("–ù–µ—Ç", callback_data="havent_spec")]]
                    mark = InlineKeyboardMarkup(but)
                    await query.edit_message_text("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ï—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —â–∏—Ç—É –ø–∏—Ç–∞–Ω–∏—è?", reply_markup=mark)
                    return ConversationHandler.END
                else:
                    await context.bot.send_message(chat_id=int(manager_id), text="–°—Ö–µ–º—ã –≥–æ—Ç–æ–≤—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å")
                    await context.bot.send_message(chat_id=int(dev_id), text=f"–°—Ö–µ–º—ã –ø—Ä–∏–Ω—è—Ç—ã.\n–†–∞–±–æ—Ç–∞: {manager_name} - {title}")
                    await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã")

                    await MainMenu.show(update, context)
                    return ConversationHandler.END

            elif event == "discard":
                if code is not None and code:
                    if code == "51":
                        code = "61"
                    elif code == "52":
                        code = "62"
                    elif code == "33":
                        code = "23"
                    f.write(f"\n{timestamp}_{code}")
                else:
                    await query.edit_message_text(
                        "–û—à–∏–±–∫–∞, –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")
                    await MainMenu().show(update, context)
                    return ConversationHandler.END

                await query.edit_message_text("–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É")
                context.user_data["curr_dir"] = selected_dir
                context.user_data["manager_dev"] = manager_dev
                context.user_data["dev_id"] = dev_id
                return States.DISCARD_COM
            else:
                await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é...")
                await MainMenu.show(update, context)
                return ConversationHandler.END


    @staticmethod
    async def have_spec_dialog(update: Update, context: CallbackContext):
        query = update.callback_query
        await query.answer()

        key = [[InlineKeyboardButton("üîµ –í –º–µ–Ω—é", callback_data="start")]]
        markup = InlineKeyboardMarkup(key)
        sent = await query.edit_message_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                                             "1. –ù–∞–∂–º–∏—Ç–µ üìé –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ .xlsx –∏–ª–∏ .xls —Ñ–∞–π–ª\n"
                                             "2. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è üìé –≤—ã–±–µ—Ä–µ—Ç–µ –§–ê–ô–õ (–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–∫ –§–ê–ô–õ)\n"
                                             "3. –í—ã–±–µ—Ä–µ—Ç–µ .xlsx –∏–ª–∏ .xls —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n"
                                             "4. –ù–∞–∂–º–∏—Ç–µ –û–¢–ü–†–ê–í–ò–¢–¨\n",
                                             reply_markup=markup)

        context.user_data["last_buttons"] = sent.message_id
        return States.SPEC_SEND

    @staticmethod
    async def send_spec(update: Update, context: CallbackContext):
        message = update.message
        user_id = update.message.from_user.id
        media_group_id = message.media_group_id
        save_dir = "photos/" + context.user_data.get("curr_dir", [])

        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç")
        if not message.document or not message.document.mime_type.startswith("application/"):
            logger.error("–≠—Ç–æ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç .xlsx –∏–ª–∏ .xls")
            await context.bot.send_message(chat_id=user_id, text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ .xlsx –∏–ª–∏ .xls —Ñ–∞–π–ª")
            return States.SPEC_SEND

        if not media_group_id:
            logger.info("–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª")
            await message.reply_text("–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª, —Å–µ–∫—É–Ω–¥—É...")
            await Load.photo_save([message], save_dir)
        else:
            logger.error("–≠—Ç–æ –Ω–µ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª .xlsx –∏–ª–∏ .xls")
            await context.bot.send_message(chat_id=user_id, text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω .xlsx –∏–ª–∏ .xls —Ñ–∞–π–ª")
            return States.SPEC_SEND

        allowed_users = os.getenv("USER_ALLOW")
        allowed_users_list = [int(uid.strip()) for uid in allowed_users.split(",") if uid.strip().isdigit()]

        for allowed_user in allowed_users_list:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {allowed_user}...")
            await context.bot.send_message(chat_id=allowed_user, text="–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!")

        await message.reply_text("–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ —â–∏—Ç –ø–∏—Ç–∞–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é...")

        await MainMenu.show(update, context)
        return ConversationHandler.END


    @staticmethod
    async def havent_spec_dialog(update: Update, context: CallbackContext):
        query = update.callback_query
        await query.answer()

        allowed_users = os.getenv("USER_ALLOW")
        allowed_users_list = [int(uid.strip()) for uid in allowed_users.split(",") if uid.strip().isdigit()]

        for allowed_user in allowed_users_list:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {allowed_user}...")
            await context.bot.send_message(chat_id=allowed_user, text="–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!")

        await MainMenu.show(update, context)
        return ConversationHandler.END


    @staticmethod
    async def discard_dialog(update: Update, context: CallbackContext):
        message = update.message
        discard_comment = message.text

        selected_dir = context.user_data.get("curr_dir", [])
        comment_path = f"photos/{selected_dir}/comment.txt"
        manager_dev = context.user_data.get("manager_dev", [])
        complete_dir = f"photos/{selected_dir}/complete"
        files = os.listdir(complete_dir)
        for file in files:
            os.remove(f"{complete_dir}/{file}")

        os.rmdir(complete_dir)

        if manager_dev == "show":
            send_id = selected_dir.split("_")[0]
        else:
            send_id = context.user_data.get("dev_id", [])
        title = None

        if os.path.exists(comment_path):
            with open(comment_path, "r", encoding="utf-8") as f:
                title = f.readlines()[0]

        await message.reply_text("–û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")

        if title is not None or title:
            await context.bot.send_message(chat_id=send_id, text=f"–°—Ö–µ–º–∞ - {title} –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
            await context.bot.send_message(chat_id=send_id, text=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–Ω–∂–µ–Ω–µ—Ä–∞:\n{discard_comment}")
        else:
            await context.bot.send_message(chat_id=send_id,
                                           text="–í–∞—à–∞ —Å—Ö–µ–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
            await context.bot.send_message(chat_id=send_id, text=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–Ω–∂–µ–Ω–µ—Ä–∞:\n{discard_comment}")


        await MainMenu.show(update, context)
        return ConversationHandler.END

    def get_handler_approval_dialog(self) -> ConversationHandler:
        return ConversationHandler(entry_points=[CallbackQueryHandler(self.show_dialog, pattern="^show_"),
                                                 CallbackQueryHandler(self.show_dialog, pattern="^dev_")],
                                   states={
                                       States.APPROVAL_MNU: [CallbackQueryHandler(self.event_dialog)],
                                       States.DISCARD_COM: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.discard_dialog)]
                                   },
                                   fallbacks=
                                   [
                                       CommandHandler("cancel", Commands.cancel),
                                       CommandHandler("start", Commands.start),
                                       CallbackQueryHandler(Commands.start, pattern="^start$"),
                                       CallbackQueryHandler(Commands.cancel, pattern="^cancel$")
                                   ]
                                   )

    def get_handler_have_spec(self) -> ConversationHandler:
        return ConversationHandler(entry_points=[CallbackQueryHandler(self.have_spec_dialog, pattern="^have_spec$")],
                                   states={
                                       States.SPEC_SEND: [
                                           MessageHandler(filters.Document.APPLICATION & ~filters.COMMAND, self.send_spec),
                                       ]
                                   },
                                   fallbacks=
                                   [
                                       CommandHandler("cancel", Commands.cancel),
                                       CommandHandler("start", Commands.start),
                                       CallbackQueryHandler(Commands.start, pattern="^start$"),
                                       CallbackQueryHandler(Commands.cancel, pattern="^cancel$")
                                   ]
                                   )

    def get_handler_in_approval_menu(self) -> CallbackQueryHandler:
        return CallbackQueryHandler(self.welcome_message, pattern="^approval$")

    def get_handler_havent_spec(self) -> CallbackQueryHandler:
        return CallbackQueryHandler(self.havent_spec_dialog, pattern="^havent_spec$")